//! The pages' templates

use std::sync::OnceLock;

use aho_corasick::AhoCorasick;
use chrono::Utc;
use icu::plurals::PluralRules;

use crate::{
	types::{ReqId, Timestamp, Title},
	Locales,
};

/// Include a generated minified html file as a `&'static str`. The file must
/// be generated by the build script and located in the `OUT_DIR` directory.
#[macro_export]
macro_rules! include_html {
	($name:literal) => {
		include_str!(concat!(env!("OUT_DIR"), concat!("/", $name, ".html")))
	};
}

pub fn countdown_html(title: Title, timestamp: Timestamp, locales: Locales, id: ReqId) -> String {
	const TEMPLATE: &str = include_html!("countdown");
	const PATTERNS: &[&str] = &[
		"{{=NONCE=}}",
		"{{=LOCALE=}}",
		"{{=PAGE_TITLE=}}",
		"{{=TITLE=}}",
		"{{=DATETIME=}}",
		"{{=SR_TEXT=}}",
		"{{=UNITS=}}",
		"{{=DAYS=}}",
		"{{=HOURS=}}",
		"{{=MINUTES=}}",
		"{{=SECONDS=}}",
		"{{=UNIT_DAYS=}}",
		"{{=UNIT_HOURS=}}",
		"{{=UNIT_MINUTES=}}",
		"{{=UNIT_SECONDS=}}",
	];

	static REPLACER: OnceLock<AhoCorasick> = OnceLock::new();

	let time_left = timestamp.0.signed_duration_since(Utc::now());
	let days_left = time_left.num_days().abs();
	let hours_left = (time_left.num_hours() - time_left.num_days() * 24).abs();
	let minutes_left = (time_left.num_minutes() - time_left.num_hours() * 60).abs();
	let seconds_left = (time_left.num_seconds() - time_left.num_minutes() * 60).abs();

	let Some((days, hours, minutes, seconds, locale, units)) = locales
		.list()
		.iter()
		.filter_map(|(locale, _)| {
			let ls = locale.to_string();
			let units = crate::intl::UNITS.get(&ls)?;
			let plurals = PluralRules::try_new_cardinal(&locale.into()).ok()?;
			Some((
				units.days.get_cow(plurals.category_for(days_left)),
				units.hours.get_cow(plurals.category_for(hours_left)),
				units.minutes.get_cow(plurals.category_for(minutes_left)),
				units.seconds.get_cow(plurals.category_for(seconds_left)),
				ls,
				serde_json::to_string(units).ok()?,
			))
		})
		.next()
	else {
		unreachable!("at least one of the locales must have all required data available");
	};

	let replacements = &[
		&id.to_string(),
		&locale.to_string(),
		"Final Countdown",
		&html_escape::encode_text(&title.0),
		&timestamp.to_string(),
		&format!(
			"{}{days_left} {days} {hours_left} {hours} {minutes_left} {minutes} {seconds_left} \
			 {seconds}",
			if time_left.num_milliseconds() < 0 {
				"-"
			} else {
				""
			}
		),
		&units,
		&format!(
			"{}{days_left}",
			if time_left.num_milliseconds() < 0 {
				"-"
			} else {
				""
			}
		),
		&format!("{hours_left:02}"),
		&format!("{minutes_left:02}"),
		&format!("{seconds_left:02}"),
		&days,
		&hours,
		&minutes,
		&seconds,
	];

	REPLACER
		.get_or_init(|| AhoCorasick::new(PATTERNS).expect("couldn't construct text replacer"))
		.replace_all(TEMPLATE, replacements)
}

pub fn new_html(locales: Locales, id: ReqId) -> String {
	const TEMPLATE: &str = include_html!("new");
	const PATTERNS: &[&str] = &[
		"{{=NONCE=}}",
		"{{=LOCALE=}}",
		"{{=PAGE_TITLE=}}",
		"{{=COPY_LINK=}}",
		"{{=START_TIMER=}}",
		"{{=SHARE=}}",
		"{{=TARGET_TEXT=}}",
		"{{=TITLE_TEXT=}}",
		"{{=ENABLE_JS=}}",
	];

	static REPLACER: OnceLock<AhoCorasick> = OnceLock::new();

	let Some(locale) = locales
		.list()
		.iter()
		.filter_map(|(locale, _)| {
			// Get the best locale which has all of the data
			let ls = locale.to_string();
			let _ = crate::intl::UNITS.get(&ls)?;
			let _ = PluralRules::try_new_cardinal(&locale.into()).ok()?;
			Some(ls)
		})
		.next()
	else {
		unreachable!("at least one of the locales must have all required data available");
	};

	// TODO: translate
	let replacements = &[
		&id.to_string(),
		&locale.to_string(),
		"Final Countdown",
		"Copy Link",
		"Start Timer",
		"Share",
		"Target Time",
		"Title (optional)",
		"Please enable JavaScript to use this page",
	];

	REPLACER
		.get_or_init(|| AhoCorasick::new(PATTERNS).expect("couldn't construct text replacer"))
		.replace_all(TEMPLATE, replacements)
}
